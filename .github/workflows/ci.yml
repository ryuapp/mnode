name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: ${{ github.ref_name != 'main' }}

jobs:
  format:
    name: Format
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@v5
      - uses: denoland/setup-deno@v2
      - uses: Swatinem/rust-cache@v2
      - name: Check Rust Code
        run: cargo fmt --check
      - name: Lint JavaScript Code
        run: deno lint
      - name: Check formatting
        run: deno fmt --check

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    permissions: {}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - os: macos-15
            target: aarch64-apple-darwin
          - os: windows-2025
            target: x86_64-pc-windows-msvc
          - os: windows-11-arm
            target: aarch64-pc-windows-msvc
            use_bindgen: true
    steps:
      - uses: actions/checkout@v5
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install LLVM (Windows ARM64)
        if: matrix.use_bindgen
        run: |
          $llvmVersion = "19.1.7"
          $llvmUrl = "https://github.com/llvm/llvm-project/releases/download/llvmorg-$llvmVersion/LLVM-$llvmVersion-woa64.exe"
          $llvmInstaller = "$env:TEMP\llvm-installer.exe"
          Invoke-WebRequest -Uri $llvmUrl -OutFile $llvmInstaller
          Start-Process -FilePath $llvmInstaller -ArgumentList "/S" -Wait
          echo "LIBCLANG_PATH=C:\Program Files\LLVM\bin" >> $env:GITHUB_ENV
        shell: pwsh
      - name: Build (with bindgen)
        if: matrix.use_bindgen
        run: cargo build --release --features rquickjs/bindgen
      - name: Build
        if: ${{ !matrix.use_bindgen }}
        run: cargo build --release
      - name: Test
        if: ${{ !matrix.use_bindgen }}
        run: cargo test
      - name: Check binary size (Unix)
        if: runner.os != 'Windows'
        run: ls -lh target/release/mnode
      - name: Check binary size (Windows)
        if: runner.os == 'Windows'
        run: Get-Item target/release/mnode.exe | Select-Object Name, @{Name="Size";Expression={"{0:N2} MB" -f ($_.Length / 1MB)}}
        shell: pwsh
