name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: ${{ github.ref_name != 'main' }}

jobs:
  format:
    name: Format
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@v5
      - uses: denoland/setup-deno@v2
        with:
          cache: true
      - uses: Swatinem/rust-cache@v2
      - name: Check formatting
        run: deno task check:format

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    permissions: {}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
          - os: macos-15
            target: aarch64-apple-darwin
          - os: windows-2025
            target: x86_64-pc-windows-msvc
          - os: windows-11-arm
            target: aarch64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v5
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Cache musl tools
        if: endsWith(matrix.target, '-musl')
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: musl-tools pkg-config
      - name: Add target
        run: rustup target add ${{ matrix.target }}
      - name: Build
        if: endsWith(matrix.target, '-musl')
        run: cargo build --release --target ${{ matrix.target }} -p mnode_fetch --features rustls --no-default-features && cargo build --release --target ${{ matrix.target }} --exclude mnode_fetch
      - name: Build
        if: ${{ !endsWith(matrix.target, '-musl') }}
        run: cargo build --release --target ${{ matrix.target }}
      - name: Test
        if: endsWith(matrix.target, '-musl')
        run: cargo test --target ${{ matrix.target }} -p mnode_fetch --features rustls --no-default-features && cargo test --target ${{ matrix.target }} --exclude mnode_fetch
      - name: Test
        if: ${{ !endsWith(matrix.target, '-musl') }}
        run: cargo test --target ${{ matrix.target }}
      - name: Collect binary size (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p sizes
          SIZE_B=$(stat -c%s target/${{ matrix.target }}/release/mnode 2>/dev/null || stat -f%z target/${{ matrix.target }}/release/mnode)
          SIZE_MB=$(awk "BEGIN {printf \"%.2f\", $SIZE_B / 1024 / 1024}")
          echo "{\"target\": \"${{ matrix.target }}\", \"size\": \"$SIZE_MB MB\"}" > sizes/${{ matrix.target }}.json
          cat sizes/${{ matrix.target }}.json
      - name: Collect binary size (Windows)
        if: runner.os == 'Windows'
        run: |
          $file = Get-Item target/${{ matrix.target }}/release/mnode.exe
          $sizeMB = "{0:N2}" -f ($file.Length / 1MB)
          $json = @{target = "${{ matrix.target }}"; size = "$sizeMB MB"} | ConvertTo-Json
          New-Item -ItemType Directory -Path ".\sizes" -Force | Out-Null
          $json | Out-File -FilePath ".\sizes\${{ matrix.target }}.json" -Encoding UTF8
          cat ".\sizes\${{ matrix.target }}.json"
        shell: pwsh
      - name: Upload binary size info
        uses: actions/upload-artifact@v5
        with:
          name: binary-sizes-${{ matrix.target }}
          path: sizes/
          retention-days: 1

  report:
    name: Report Binary Sizes
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: github.event_name == 'pull_request'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v6
        with:
          path: all-sizes
          pattern: binary-sizes-*

      - name: Collect and report sizes
        run: |
          echo "## Binary Sizes" > sizes_report.md
          echo "" >> sizes_report.md
          echo "| Target | Size |" >> sizes_report.md
          echo "|--------|------|" >> sizes_report.md

          # Collect and sort by OS: Linux, Apple, Windows
          for pattern in "linux" "apple" "windows"; do
            for json_file in all-sizes/binary-sizes-*/*.json; do
              if [ -f "$json_file" ]; then
                TARGET=$(jq -r '.target' "$json_file")
                if [[ "$TARGET" == *"$pattern"* ]]; then
                  SIZE=$(jq -r '.size' "$json_file")
                  echo "| $TARGET | $SIZE |" >> sizes_report.md
                fi
              fi
            done
          done

          cat sizes_report.md

      - name: Post comment to PR
        uses: actions/github-script@v8
        with:
          script: |
            const fs = await import('fs');
            const report = fs.default.readFileSync('sizes_report.md', 'utf8');
            const body = '<!-- binary-sizes-report -->\n' + report;

            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const existingComment = comments.data.find(comment =>
              comment.body.includes('<!-- binary-sizes-report -->')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
